<?php
/**
 * Created by PhpStorm.
 * User: jeanbaptistecaplan
 * Date: 13/05/2020
 * Time: 01:39
 */

namespace CPLN\Services;


use Plexus\AbstractRuntime;
use Plexus\Application;
use Plexus\Configuration;
use Plexus\Service\AbstractService;
use Plexus\Service\Renderer\TwigRenderer;
use Plexus\Utils\Text;

class Label extends AbstractService {

    const DATABASE_ERROR = "Une erreur a eu lieu lors de la connexion à la base de données. Les changements n'ont pas été sauvegardées.";

    /**
     * @var Configuration
     */
    protected $labelConfig;

    /**
     * @var Configuration
     */
    protected $htmlConfig;

    /**
     * @param AbstractRuntime $runtime
     * @param mixed ...$options
     * @return Label
     */
    public static function fromRuntime(AbstractRuntime $runtime, ...$options) {
        return parent::fromRuntime($runtime, $options); // TODO: Change the autogenerated stub
    }

    /**
     *
     */
    public function onRun() {
        $this->labelConfig = $this->getApplication()->getConfiguration("label");
        $this->htmlConfig = $this->getApplication()->getConfiguration("html");
        $twig = TwigRenderer::fromRuntime($this);
        $twig->addGlobal("__label", $this);

        $twig->addFilter("to_label", function($value) {
            return $this->value_to_label($value);
        });
        $twig->addFilter("to_html", function($value) {
            return $this->value_to_html($value);
        },  array('is_safe' => array('html')));

        $twig->addFilter("remove_accent", function($value) {
            return $this->remove_accent($value);
        });
        $twig->addFilter("days", function($value) {
            return $this->days($value);
        });
        $twig->addFilter("since", function($value) {
            return $this->since($value);
        });

    }

    /**
     * @param $value
     * @return mixed|null|\Plexus\DataType\Collection
     */
    public function value_to_label($value) {
        return $this->labelConfig->get($value, "{{ LABEL_NOT_SET }}");
    }

    /**
     * @param $value
     * @return mixed|null|\Plexus\DataType\Collection
     */
    public function value_to_html($value) {
        return $this->htmlConfig->get($value, "{{ HTML_NOT_SET }}");
    }

    /**
     * @param $date
     * @return int
     */
    public function days($date) {
        $now = new \DateTime();
        $since_start = $now->diff(new \DateTime($date));
        $days = $since_start->days;
        if ($days > 0) {
            return $since_start->days * ($since_start->invert ? -1 : 1);
        } else {
            if ($since_start->invert) {
                return -1;
            }
            return $days;
        }
    }

    /**
     * @param $value
     * @return string
     */
    public function remove_accent($value) {
        return Text::withoutAccent($value);
    }

    /**
     * @param string $name
     * @return string
     */
    public function greetings($name="") {
        $hour = intval(date('H'));
        $greetings = "Bonjour";
        if ($hour < 4 || $hour > 18) {
            $greetings = "Bonsoir";
        }
        if (strlen($name) > 0) {
            return $greetings." ".$name;
        }
        return $greetings;
    }

    /**
     * @param $value
     * @return string|string[]|null
     * @throws \Exception
     */
    public function since($value) {
        $date = new \DateTime($value);
        $since_start = $date->diff(new \DateTime());

        if ($since_start->y >= 1) {
            $value = $since_start->y;
            return Text::format("Il y a {} an{}", $value, ($value > 1) ? 's' : '' );
        }
        if ($since_start->m >= 1) {
            $value = $since_start->m;
            return Text::format("Il y a {} mois", $value);
        }
        if ($since_start->days >= 7) {
            $value = intval(round($since_start->days / 7));
            return Text::format("Il y a {} semaine{}", $value, ($value > 1) ? 's' : '' );
        }
        if ($since_start->days >= 1) {
            $value = $since_start->days;
            return Text::format("Il y a {} jour{}", $value, ($value > 1) ? 's' : '' );
        }
        if ($since_start->h >= 1) {
            $value = $since_start->h;
            return Text::format("Il y a {} heure{}", $value, ($value > 1) ? 's' : '' );
        }
        if ($since_start->m >= 1) {
            $value = $since_start->h;
            return Text::format("Il y a {} minute{}", $value, ($value > 1) ? 's' : '' );
        }

        return "À l'instant";
    }
}